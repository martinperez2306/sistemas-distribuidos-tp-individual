version: '3'
services:
  rabbitmq:
    build:
      context: ./rabbitmq
      dockerfile: rabbitmq.dockerfile
    image: rabbitmq
    ports:
      - 15672:15672
    networks:
      - testing_net
    container_name: rabbitmq
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:15672"]
        interval: 10s
        timeout: 5s
        retries: 10

  middleware:
    build:
      context: ./middleware
      dockerfile: middleware.dockerfile
    image: middleware
    container_name: middleware
    networks:
      - testing_net
    restart: on-failure
    depends_on:
      - rabbitmq
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_INSTANCES=1
    volumes:
      - "./config/middleware:/root/middleware/config"

  ingestion_service_1:
    build:
      context: ./ingestion_service
      dockerfile: ingestion_service.dockerfile
    image: ingestion_service
    container_name: ingestion_service_1
    networks:
      - testing_net
    restart: on-failure
    depends_on:
      - rabbitmq
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_ID=ingestion_service_1
      - GROUP_ID=ingestion_service
    volumes:
      - "./config/ingestion_service:/root/ingestion_service/config"

  like_filter_1:
    build:
      context: ./like_filter
      dockerfile: like_filter.dockerfile
    image: like_filter
    container_name: like_filter_1
    networks:
      - testing_net
    restart: on-failure
    depends_on:
      - rabbitmq
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_ID=like_filter_1
      - GROUP_ID=like_filter
    volumes:
      - "./config/like_filter:/root/like_filter/config"

  funny_filter_1:
    build:
      context: ./funny_filter
      dockerfile: funny_filter.dockerfile
    image: funny_filter
    container_name: funny_filter_1
    networks:
      - testing_net
    restart: on-failure
    depends_on:
      - rabbitmq
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_ID=funny_filter_1
      - GROUP_ID=funny_filter
    volumes:
      - "./config/funny_filter:/root/funny_filter/config"

  day_grouper_1:
    build:
      context: ./day_grouper
      dockerfile: day_grouper.dockerfile
    image: day_grouper
    container_name: day_grouper_1
    networks:
      - testing_net
    restart: on-failure
    depends_on:
      - rabbitmq
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_ID=day_grouper_1
      - GROUP_ID=day_grouper
    volumes:
      - "./config/day_grouper:/root/day_grouper/config"

  max_1:
    build:
      context: ./max
      dockerfile: max.dockerfile
    image: max
    container_name: max_1
    networks:
      - testing_net
    restart: on-failure
    depends_on:
      - rabbitmq
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_ID=max_1
      - GROUP_ID=max
      - SERVICE_INSTANCES=1
    volumes:
      - "./config/max:/root/max/config"

  reporting_service_1:
    build:
      context: ./reporting_service
      dockerfile: reporting_service.dockerfile
    image: reporting_service
    container_name: reporting_service_1
    networks:
      - testing_net
    restart: on-failure
    depends_on:
      - rabbitmq
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_ID=reporting_service_1
      - GROUP_ID=reporting_service
      - SERVICE_INSTANCES=1
    volumes:
      - "./config/reporting_service:/root/reporting_service/config"

networks:
  testing_net:
    ipam:
      config:
        - subnet: 172.20.0.0/16